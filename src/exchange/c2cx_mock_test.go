package exchange

import (
	"github.com/shopspring/decimal"
	"github.com/stretchr/testify/mock"

	"github.com/skycoin/exchange-api/exchange/c2cx"
)

// MockC2CXClient is an autogenerated mock type for the MockC2CXClient type
type MockC2CXClient struct {
	mock.Mock
}

func (_m *MockC2CXClient) GetBalanceSummary() (*c2cx.BalanceSummary, error) {
	ret := _m.Called()

	var r0 *c2cx.BalanceSummary
	if rf, ok := ret.Get(0).(func() *c2cx.BalanceSummary); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*c2cx.BalanceSummary)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderByStatus provides a mock function with given fields: _a0, _a1
func (_m *MockC2CXClient) GetOrderByStatus(_a0 c2cx.TradePair, _a1 c2cx.OrderStatus) ([]c2cx.Order, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []c2cx.Order
	if rf, ok := ret.Get(0).(func(c2cx.TradePair, c2cx.OrderStatus) []c2cx.Order); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]c2cx.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(c2cx.TradePair, c2cx.OrderStatus) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderInfo provides a mock function with given fields: _a0, _a1
func (_m *MockC2CXClient) GetOrderInfo(_a0 c2cx.TradePair, _a1 c2cx.OrderID) (*c2cx.Order, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *c2cx.Order
	if rf, ok := ret.Get(0).(func(c2cx.TradePair, c2cx.OrderID) *c2cx.Order); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*c2cx.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(c2cx.TradePair, c2cx.OrderID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarketBuy provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockC2CXClient) MarketBuy(_a0 c2cx.TradePair, _a1 decimal.Decimal, _a2 *string) (c2cx.OrderID, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 c2cx.OrderID
	if rf, ok := ret.Get(0).(func(c2cx.TradePair, decimal.Decimal, *string) c2cx.OrderID); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(c2cx.OrderID)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(c2cx.TradePair, decimal.Decimal, *string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
